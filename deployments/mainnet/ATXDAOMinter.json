{
  "address": "0xf4c9a61D56B7645bE89ecA17CE6BAcB3F164b2F1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bank",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DoubleMint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedTransferToVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidEtherSent",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMerkleRoot",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintNotStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTokenId",
          "type": "uint256"
        }
      ],
      "name": "TradeIn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "canMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "canTradeIn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "hasMinted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMintable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastMinted",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRoundTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        }
      ],
      "name": "mintSpecial",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintedIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "contract IATXDAONFT_V2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "resetHasMinted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_bank",
          "type": "address"
        }
      ],
      "name": "setBank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isNewRound",
          "type": "bool"
        }
      ],
      "name": "startMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tradeIn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferNftOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "proof",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "tokenURI",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "isNewMember",
          "type": "bool"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x9708de06732eecdc8923cd5d7b87573bf36c2b48c9e48af6235f88c253a20e0e",
  "receipt": {
    "to": null,
    "from": "0x51040CE6FC9b9C5Da69B044109f637dc997e92DE",
    "contractAddress": "0xf4c9a61D56B7645bE89ecA17CE6BAcB3F164b2F1",
    "transactionIndex": 70,
    "gasUsed": "1320490",
    "logsBloom": "0x
    "blockHash": "0xa113a8cb9943162f8c9020c1e68936f82f13ca113bf5bf2cb45fb06027a117f2",
    "transactionHash": "0x9708de06732eecdc8923cd5d7b87573bf36c2b48c9e48af6235f88c253a20e0e",
    "logs": [
      {
        "transactionIndex": 70,
        "blockNumber": 17673292,
        "transactionHash": "0x9708de06732eecdc8923cd5d7b87573bf36c2b48c9e48af6235f88c253a20e0e",
        "address": "0xf4c9a61D56B7645bE89ecA17CE6BAcB3F164b2F1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000051040ce6fc9b9c5da69b044109f637dc997e92de"
        ],
        "data": "0x",
        "logIndex": 201,
        "blockHash": "0xa113a8cb9943162f8c9020c1e68936f82f13ca113bf5bf2cb45fb06027a117f2"
      }
    ],
    "blockNumber": 17673292,
    "cumulativeGasUsed": "7231165",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x63f8F23ce0f3648097447622209E95A391c44b00",
    "0x407cf0e5dd3c2c4bce5a32b92109c2c6f7f1ce23"
  ],
  "numDeployments": 1,
  "solcInputHash": "4925d77f9500ff07a463df13af5099bc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bank\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DoubleMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedTransferToVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidEtherSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTokenId\",\"type\":\"uint256\"}],\"name\":\"TradeIn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"canMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"canTradeIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"hasMinted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastMinted\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRoundTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"name\":\"mintSpecial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintedIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IATXDAONFT_V2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"resetHasMinted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bank\",\"type\":\"address\"}],\"name\":\"setBank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isNewRound\",\"type\":\"bool\"}],\"name\":\"startMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tradeIn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferNftOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"isNewMember\",\"type\":\"bool\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ATXDAOMinter.sol\":\"ATXDAOMinter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.2) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proofLen - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            require(proofPos == proofLen, \\\"MerkleProof: invalid multiproof\\\");\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\"},\"contracts/ATXDAOMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {MerkleProof} from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\ninterface IATXDAONFT_V2 {\\n    function mintSpecial(address[] memory recipients, string memory tokenURI, bool _dynamic) external;\\n\\n    function transferOwnership(address newOwner) external;\\n\\n    function owner() external view returns (address);\\n\\n    function isMintable() external view returns (bool);\\n\\n    function endMint() external;\\n\\n    function balanceOf(address _owner) external view returns (uint256);\\n\\n    function getApproved(uint256 tokenId) external view returns (address);\\n\\n    function ownerOf(uint256 tokenId) external view returns (address);\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n}\\n\\nerror ZeroAddress();\\nerror NotOwner();\\nerror InvalidPrice();\\nerror InvalidMerkleRoot();\\nerror InvalidEtherSent();\\nerror InvalidProof();\\nerror MintNotStarted();\\nerror DoubleMint();\\nerror FailedTransferToVault();\\n\\ncontract ATXDAOMinter is Ownable {\\n    using MerkleProof for bytes32[];\\n\\n    bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\\n\\n    IATXDAONFT_V2 public nft;\\n    bool public isMintable;\\n    uint8 public mintedIndex;\\n    bytes32 public merkleRoot;\\n    uint256 public price;\\n    address payable bank;\\n    uint256 public lastRoundTokenId;\\n    mapping(address => uint8) public lastMinted;\\n\\n    event Mint(address to, string tokenURI, uint256 price);\\n    event TradeIn(address to, string tokenURI, uint256 oldTokenId);\\n\\n    constructor(address _nftAddress, address _bank) {\\n        if (_nftAddress == address(0)) revert ZeroAddress();\\n        _setBank(_bank);\\n        nft = IATXDAONFT_V2(_nftAddress);\\n        mintedIndex = 1;\\n    }\\n\\n    function _setHasMinted(address recipient) private {\\n        lastMinted[recipient] = mintedIndex;\\n    }\\n\\n    function hasMinted(address recipient) public view returns (bool) {\\n        return lastMinted[recipient] == mintedIndex;\\n    }\\n\\n    function _setBank(address _bank) private {\\n        if (_bank == address(0)) revert ZeroAddress();\\n        bank = payable(_bank);\\n    }\\n\\n    function setBank(address _bank) external onlyOwner {\\n        _setBank(_bank);\\n    }\\n\\n    function transferNftOwnership(address to) external onlyOwner {\\n        if (to == address(0)) revert ZeroAddress();\\n        nft.transferOwnership(to);\\n    }\\n\\n    function startMint(bytes32 _merkleRoot, uint256 _price, bool _isNewRound) external onlyOwner {\\n        if (_price <= 0.01 ether) revert InvalidPrice();\\n        if (_merkleRoot == bytes32(0)) revert InvalidMerkleRoot();\\n\\n        if (nft.isMintable()) {\\n            nft.endMint();\\n        }\\n\\n        price = _price;\\n        merkleRoot = _merkleRoot;\\n        isMintable = true;\\n\\n        if (_isNewRound) {\\n            _resetAllHasMinted();\\n        }\\n    }\\n\\n    function endMint() external onlyOwner {\\n        isMintable = false;\\n    }\\n\\n    function _mint(address to, string calldata tokenURI) private {\\n        address[] memory recipients = new address[](1);\\n        recipients[0] = to;\\n        nft.mintSpecial(recipients, tokenURI, false);\\n    }\\n\\n    function mintSpecial(address to, string calldata tokenURI) external onlyOwner {\\n        _mint(to, tokenURI);\\n        emit Mint(to, tokenURI, 0);\\n    }\\n\\n    function canMint(address recipient, bytes32[] calldata proof, string calldata tokenURI)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return isMintable && !hasMinted(recipient) && nft.balanceOf(recipient) == 0\\n            && verifyProof(proof, recipient, tokenURI, true);\\n    }\\n\\n    function canTradeIn(address recipient, bytes32[] calldata proof, string calldata tokenURI)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return isMintable && !hasMinted(recipient) && nft.balanceOf(recipient) > 0\\n            && verifyProof(proof, recipient, tokenURI, false);\\n    }\\n\\n    function verifyProof(bytes32[] calldata proof, address recipient, string calldata tokenURI, bool isNewMember)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        return proof.verify(merkleRoot, keccak256(abi.encodePacked(recipient, isNewMember ? 1 : 0, tokenURI)));\\n    }\\n\\n    function _authMint(address recipient, bytes32[] calldata proof, string calldata tokenURI, bool isNewMember)\\n        private\\n        view\\n    {\\n        if (!isMintable) revert MintNotStarted();\\n        if (!verifyProof(proof, recipient, tokenURI, isNewMember)) revert InvalidProof();\\n        if (hasMinted(msg.sender)) revert DoubleMint();\\n    }\\n\\n    function mint(bytes32[] calldata proof, string calldata tokenURI) external payable {\\n        _authMint(msg.sender, proof, tokenURI, true);\\n        if (nft.balanceOf(msg.sender) != 0) revert DoubleMint();\\n        if (msg.value < price) revert InvalidEtherSent();\\n\\n        (bool success,) = bank.call{value: msg.value}(\\\"\\\");\\n        if (!success) revert FailedTransferToVault();\\n\\n        _setHasMinted(msg.sender);\\n        _mint(msg.sender, tokenURI);\\n\\n        emit Mint(msg.sender, tokenURI, msg.value);\\n    }\\n\\n    function tradeIn(bytes32[] calldata proof, string calldata tokenURI, uint256 tokenId) external {\\n        _authMint(msg.sender, proof, tokenURI, false);\\n\\n        _setHasMinted(msg.sender);\\n        _mint(msg.sender, tokenURI);\\n        nft.safeTransferFrom(msg.sender, address(this), tokenId);\\n\\n        emit TradeIn(msg.sender, tokenURI, tokenId);\\n    }\\n\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function resetHasMinted(address[] calldata addrs) external onlyOwner {\\n        for (uint256 i = 0; i < addrs.length; i++) {\\n            lastMinted[addrs[i]] = 0;\\n        }\\n    }\\n\\n    function _resetAllHasMinted() private {\\n        mintedIndex++;\\n    }\\n}\\n\",\"keccak256\":\"0x2314d36fd77f736e6d0ef225be6c1f9ebd3512f416f60225c5b31e4cfa2bb290\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c806347ccca02116100b6578063bdf0f4f91161006f578063bdf0f4f9146103bf578063c095147b146103df578063c15b1a64146103ff578063c4b5aa961461041f578063df681fd314610432578063f2fde38b1461044857600080fd5b806347ccca02146102fe5780634ab2c58914610336578063715018a6146103565780638da5cb5b1461036b578063939f58b714610389578063a035b1fe146103a957600080fd5b80632e686d69116101085780632e686d69146102065780632eb4a7ab1461024857806338e21cce1461026c5780633debbbc01461029c57806345ae6606146102bc57806346b45af7146102dd57600080fd5b8063017043a514610145578063090d23b91461015c578063150b7a021461017c5780631a04c4ec146101c65780632266895b146101e6575b600080fd5b34801561015157600080fd5b5061015a610468565b005b34801561016857600080fd5b5061015a610177366004610fd7565b61047f565b34801561018857600080fd5b506101a861019736600461103b565b630a85bd0160e11b95945050505050565b6040516001600160e01b031990911681526020015b60405180910390f35b3480156101d257600080fd5b5061015a6101e13660046110aa565b610493565b3480156101f257600080fd5b5061015a61020136600461110b565b6104e9565b34801561021257600080fd5b50610236610221366004610fd7565b60066020526000908152604090205460ff1681565b60405160ff90911681526020016101bd565b34801561025457600080fd5b5061025e60025481565b6040519081526020016101bd565b34801561027857600080fd5b5061028c610287366004610fd7565b610659565b60405190151581526020016101bd565b3480156102a857600080fd5b5061015a6102b7366004610fd7565b610688565b3480156102c857600080fd5b5060015461023690600160a81b900460ff1681565b3480156102e957600080fd5b5060015461028c90600160a01b900460ff1681565b34801561030a57600080fd5b5060015461031e906001600160a01b031681565b6040516001600160a01b0390911681526020016101bd565b34801561034257600080fd5b5061015a610351366004611189565b610719565b34801561036257600080fd5b5061015a610796565b34801561037757600080fd5b506000546001600160a01b031661031e565b34801561039557600080fd5b5061015a6103a43660046111cb565b6107aa565b3480156103b557600080fd5b5061025e60035481565b3480156103cb57600080fd5b5061028c6103da36600461123f565b61087b565b3480156103eb57600080fd5b5061028c6103fa3660046112af565b610944565b34801561040b57600080fd5b5061028c61041a36600461123f565b6109cf565b61015a61042d366004611345565b610a8d565b34801561043e57600080fd5b5061025e60055481565b34801561045457600080fd5b5061015a610463366004610fd7565b610c15565b610470610c90565b6001805460ff60a01b19169055565b610487610c90565b61049081610cea565b50565b61049b610c90565b6104a6838383610d33565b7fec4de1eef14af3ae5d77facf1ed7a9d3d50f6285573ee0ec155fc11217fc344283838360006040516104dc94939291906113da565b60405180910390a1505050565b6104f1610c90565b662386f26fc1000082116105175760405162bfc92160e01b815260040160405180910390fd5b8261053557604051639dd854d360e01b815260040160405180910390fd5b600160009054906101000a90046001600160a01b03166001600160a01b03166346b45af76040518163ffffffff1660e01b815260040160206040518083038186803b15801561058357600080fd5b505afa158015610597573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bb9190611410565b1561062957600160009054906101000a90046001600160a01b03166001600160a01b031663017043a56040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561061057600080fd5b505af1158015610624573d6000803e3d6000fd5b505050505b600382905560028390556001805460ff60a01b1916600160a01b179055801561065457610654610de5565b505050565b6001546001600160a01b0390911660009081526006602052604090205460ff908116600160a81b909204161490565b610690610c90565b6001600160a01b0381166106b75760405163d92e233d60e01b815260040160405180910390fd5b60015460405163f2fde38b60e01b81526001600160a01b0383811660048301529091169063f2fde38b90602401600060405180830381600087803b1580156106fe57600080fd5b505af1158015610712573d6000803e3d6000fd5b5050505050565b610721610c90565b60005b81811015610654576000600660008585858181106107445761074461142d565b90506020020160208101906107599190610fd7565b6001600160a01b031681526020810191909152604001600020805460ff191660ff929092169190911790558061078e81611459565b915050610724565b61079e610c90565b6107a86000610e1a565b565b6107b933868686866000610e6a565b6107c233610eee565b6107cd338484610d33565b600154604051632142170760e11b8152336004820152306024820152604481018390526001600160a01b03909116906342842e0e90606401600060405180830381600087803b15801561081f57600080fd5b505af1158015610833573d6000803e3d6000fd5b505050507fc315d643bd893da1e3ebfdefc8b0d6158febe498b1fe0bc2b96fb250c59d212b3384848460405161086c94939291906113da565b60405180910390a15050505050565b600154600090600160a01b900460ff16801561089d575061089b86610659565b155b801561092457506001546040516370a0823160e01b81526001600160a01b03888116600483015260009216906370a082319060240160206040518083038186803b1580156108ea57600080fd5b505afa1580156108fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109229190611474565b115b801561093a575061093a85858886866000610944565b9695505050505050565b60006109c4600254868461095957600061095c565b60015b8787604051602001610971949392919061148d565b60405160208183030381529060405280519060200120898980806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929493925050610f269050565b979650505050505050565b600154600090600160a01b900460ff1680156109f157506109ef86610659565b155b8015610a7757506001546040516370a0823160e01b81526001600160a01b038881166004830152909116906370a082319060240160206040518083038186803b158015610a3d57600080fd5b505afa158015610a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a759190611474565b155b801561093a575061093a85858886866001610944565b610a9c33858585856001610e6a565b6001546040516370a0823160e01b81523360048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610adf57600080fd5b505afa158015610af3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b179190611474565b15610b3557604051634bfae8bb60e01b815260040160405180910390fd5b600354341015610b5857604051637a60b0ed60e01b815260040160405180910390fd5b6004546040516000916001600160a01b03169034908381818185875af1925050503d8060008114610ba5576040519150601f19603f3d011682016040523d82523d6000602084013e610baa565b606091505b5050905080610bcc5760405163fb327cd560e01b815260040160405180910390fd5b610bd533610eee565b610be0338484610d33565b7fec4de1eef14af3ae5d77facf1ed7a9d3d50f6285573ee0ec155fc11217fc34423384843460405161086c94939291906113da565b610c1d610c90565b6001600160a01b038116610c875760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61049081610e1a565b6000546001600160a01b031633146107a85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610c7e565b6001600160a01b038116610d115760405163d92e233d60e01b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b604080516001808252818301909252600091602080830190803683370190505090508381600081518110610d6957610d6961142d565b6001600160a01b039283166020918202929092010152600154604051637487d3db60e11b815291169063e90fa7b690610dad908490879087906000906004016114cf565b600060405180830381600087803b158015610dc757600080fd5b505af1158015610ddb573d6000803e3d6000fd5b5050505050505050565b60018054600160a81b900460ff16906015610dff8361153b565b91906101000a81548160ff021916908360ff16021790555050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600154600160a01b900460ff16610e9457604051630314872760e11b815260040160405180910390fd5b610ea2858588868686610944565b610ebf576040516309bde33960e01b815260040160405180910390fd5b610ec833610659565b15610ee657604051634bfae8bb60e01b815260040160405180910390fd5b505050505050565b6001546001600160a01b039091166000908152600660205260409020805460ff191660ff600160a81b90930492909216919091179055565b600082610f338584610f3c565b14949350505050565b600081815b8451811015610f8157610f6d82868381518110610f6057610f6061142d565b6020026020010151610f89565b915080610f7981611459565b915050610f41565b509392505050565b6000818310610fa5576000828152602084905260409020610fb4565b60008381526020839052604090205b9392505050565b80356001600160a01b0381168114610fd257600080fd5b919050565b600060208284031215610fe957600080fd5b610fb482610fbb565b60008083601f84011261100457600080fd5b50813567ffffffffffffffff81111561101c57600080fd5b60208301915083602082850101111561103457600080fd5b9250929050565b60008060008060006080868803121561105357600080fd5b61105c86610fbb565b945061106a60208701610fbb565b935060408601359250606086013567ffffffffffffffff81111561108d57600080fd5b61109988828901610ff2565b969995985093965092949392505050565b6000806000604084860312156110bf57600080fd5b6110c884610fbb565b9250602084013567ffffffffffffffff8111156110e457600080fd5b6110f086828701610ff2565b9497909650939450505050565b801515811461049057600080fd5b60008060006060848603121561112057600080fd5b83359250602084013591506040840135611139816110fd565b809150509250925092565b60008083601f84011261115657600080fd5b50813567ffffffffffffffff81111561116e57600080fd5b6020830191508360208260051b850101111561103457600080fd5b6000806020838503121561119c57600080fd5b823567ffffffffffffffff8111156111b357600080fd5b6111bf85828601611144565b90969095509350505050565b6000806000806000606086880312156111e357600080fd5b853567ffffffffffffffff808211156111fb57600080fd5b61120789838a01611144565b9097509550602088013591508082111561122057600080fd5b5061122d88828901610ff2565b96999598509660400135949350505050565b60008060008060006060868803121561125757600080fd5b61126086610fbb565b9450602086013567ffffffffffffffff8082111561127d57600080fd5b61128989838a01611144565b909650945060408801359150808211156112a257600080fd5b5061109988828901610ff2565b600080600080600080608087890312156112c857600080fd5b863567ffffffffffffffff808211156112e057600080fd5b6112ec8a838b01611144565b909850965086915061130060208a01610fbb565b9550604089013591508082111561131657600080fd5b5061132389828a01610ff2565b9094509250506060870135611337816110fd565b809150509295509295509295565b6000806000806040858703121561135b57600080fd5b843567ffffffffffffffff8082111561137357600080fd5b61137f88838901611144565b9096509450602087013591508082111561139857600080fd5b506113a587828801610ff2565b95989497509550505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6001600160a01b03851681526060602082018190526000906113ff90830185876113b1565b905082604083015295945050505050565b60006020828403121561142257600080fd5b8151610fb4816110fd565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060001982141561146d5761146d611443565b5060010190565b60006020828403121561148657600080fd5b5051919050565b606085901b6bffffffffffffffffffffffff1916815260f884901b6001600160f81b031916601482015281836015830137600091016015019081529392505050565b606080825285519082018190526000906020906080840190828901845b828110156115115781516001600160a01b0316845292840192908401906001016114ec565b505050838103828501526115268187896113b1565b92505050821515604083015295945050505050565b600060ff821660ff81141561155257611552611443565b6001019291505056fea26469706673582212200233138ed1ef6b20339a358b1614aab241f2add7f19a3256226cc902354da40664736f6c63430008090033",
  "libraries": {},
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/ATXDAOMinter.sol:ATXDAOMinter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 761,
        "contract": "contracts/ATXDAOMinter.sol:ATXDAOMinter",
        "label": "nft",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IATXDAONFT_V2)731"
      },
      {
        "astId": 763,
        "contract": "contracts/ATXDAOMinter.sol:ATXDAOMinter",
        "label": "isMintable",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 765,
        "contract": "contracts/ATXDAOMinter.sol:ATXDAOMinter",
        "label": "mintedIndex",
        "offset": 21,
        "slot": "1",
        "type": "t_uint8"
      },
      {
        "astId": 767,
        "contract": "contracts/ATXDAOMinter.sol:ATXDAOMinter",
        "label": "merkleRoot",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 769,
        "contract": "contracts/ATXDAOMinter.sol:ATXDAOMinter",
        "label": "price",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 771,
        "contract": "contracts/ATXDAOMinter.sol:ATXDAOMinter",
        "label": "bank",
        "offset": 0,
        "slot": "4",
        "type": "t_address_payable"
      },
      {
        "astId": 773,
        "contract": "contracts/ATXDAOMinter.sol:ATXDAOMinter",
        "label": "lastRoundTokenId",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 777,
        "contract": "contracts/ATXDAOMinter.sol:ATXDAOMinter",
        "label": "lastMinted",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IATXDAONFT_V2)731": {
        "encoding": "inplace",
        "label": "contract IATXDAONFT_V2",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}